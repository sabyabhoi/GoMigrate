// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example.com/GoMigrate/dao/model"
)

func newPERSON(db *gorm.DB, opts ...gen.DOOption) pERSON {
	_pERSON := pERSON{}

	_pERSON.pERSONDo.UseDB(db, opts...)
	_pERSON.pERSONDo.UseModel(&model.PERSON{})

	tableName := _pERSON.pERSONDo.TableName()
	_pERSON.ALL = field.NewAsterisk(tableName)
	_pERSON.ID = field.NewInt32(tableName, "id")
	_pERSON.FirstName = field.NewString(tableName, "first_name")
	_pERSON.LastName = field.NewString(tableName, "last_name")
	_pERSON.Email = field.NewString(tableName, "email")
	_pERSON.Gender = field.NewString(tableName, "gender")
	_pERSON.IPAddress = field.NewString(tableName, "ip_address")

	_pERSON.fillFieldMap()

	return _pERSON
}

type pERSON struct {
	pERSONDo pERSONDo

	ALL       field.Asterisk
	ID        field.Int32
	FirstName field.String
	LastName  field.String
	Email     field.String
	Gender    field.String
	IPAddress field.String

	fieldMap map[string]field.Expr
}

func (p pERSON) Table(newTableName string) *pERSON {
	p.pERSONDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pERSON) As(alias string) *pERSON {
	p.pERSONDo.DO = *(p.pERSONDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pERSON) updateTableName(table string) *pERSON {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.FirstName = field.NewString(table, "first_name")
	p.LastName = field.NewString(table, "last_name")
	p.Email = field.NewString(table, "email")
	p.Gender = field.NewString(table, "gender")
	p.IPAddress = field.NewString(table, "ip_address")

	p.fillFieldMap()

	return p
}

func (p *pERSON) WithContext(ctx context.Context) *pERSONDo { return p.pERSONDo.WithContext(ctx) }

func (p pERSON) TableName() string { return p.pERSONDo.TableName() }

func (p pERSON) Alias() string { return p.pERSONDo.Alias() }

func (p pERSON) Columns(cols ...field.Expr) gen.Columns { return p.pERSONDo.Columns(cols...) }

func (p *pERSON) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pERSON) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["first_name"] = p.FirstName
	p.fieldMap["last_name"] = p.LastName
	p.fieldMap["email"] = p.Email
	p.fieldMap["gender"] = p.Gender
	p.fieldMap["ip_address"] = p.IPAddress
}

func (p pERSON) clone(db *gorm.DB) pERSON {
	p.pERSONDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pERSON) replaceDB(db *gorm.DB) pERSON {
	p.pERSONDo.ReplaceDB(db)
	return p
}

type pERSONDo struct{ gen.DO }

func (p pERSONDo) Debug() *pERSONDo {
	return p.withDO(p.DO.Debug())
}

func (p pERSONDo) WithContext(ctx context.Context) *pERSONDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pERSONDo) ReadDB() *pERSONDo {
	return p.Clauses(dbresolver.Read)
}

func (p pERSONDo) WriteDB() *pERSONDo {
	return p.Clauses(dbresolver.Write)
}

func (p pERSONDo) Session(config *gorm.Session) *pERSONDo {
	return p.withDO(p.DO.Session(config))
}

func (p pERSONDo) Clauses(conds ...clause.Expression) *pERSONDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pERSONDo) Returning(value interface{}, columns ...string) *pERSONDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pERSONDo) Not(conds ...gen.Condition) *pERSONDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pERSONDo) Or(conds ...gen.Condition) *pERSONDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pERSONDo) Select(conds ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pERSONDo) Where(conds ...gen.Condition) *pERSONDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pERSONDo) Order(conds ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pERSONDo) Distinct(cols ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pERSONDo) Omit(cols ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pERSONDo) Join(table schema.Tabler, on ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pERSONDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pERSONDo) RightJoin(table schema.Tabler, on ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pERSONDo) Group(cols ...field.Expr) *pERSONDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pERSONDo) Having(conds ...gen.Condition) *pERSONDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pERSONDo) Limit(limit int) *pERSONDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pERSONDo) Offset(offset int) *pERSONDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pERSONDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pERSONDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pERSONDo) Unscoped() *pERSONDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pERSONDo) Create(values ...*model.PERSON) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pERSONDo) CreateInBatches(values []*model.PERSON, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pERSONDo) Save(values ...*model.PERSON) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pERSONDo) First() (*model.PERSON, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PERSON), nil
	}
}

func (p pERSONDo) Take() (*model.PERSON, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PERSON), nil
	}
}

func (p pERSONDo) Last() (*model.PERSON, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PERSON), nil
	}
}

func (p pERSONDo) Find() ([]*model.PERSON, error) {
	result, err := p.DO.Find()
	return result.([]*model.PERSON), err
}

func (p pERSONDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PERSON, err error) {
	buf := make([]*model.PERSON, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pERSONDo) FindInBatches(result *[]*model.PERSON, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pERSONDo) Attrs(attrs ...field.AssignExpr) *pERSONDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pERSONDo) Assign(attrs ...field.AssignExpr) *pERSONDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pERSONDo) Joins(fields ...field.RelationField) *pERSONDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pERSONDo) Preload(fields ...field.RelationField) *pERSONDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pERSONDo) FirstOrInit() (*model.PERSON, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PERSON), nil
	}
}

func (p pERSONDo) FirstOrCreate() (*model.PERSON, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PERSON), nil
	}
}

func (p pERSONDo) FindByPage(offset int, limit int) (result []*model.PERSON, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pERSONDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pERSONDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pERSONDo) Delete(models ...*model.PERSON) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pERSONDo) withDO(do gen.Dao) *pERSONDo {
	p.DO = *do.(*gen.DO)
	return p
}
